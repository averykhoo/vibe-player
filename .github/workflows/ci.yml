# File: .github/workflows/ci.yml

name: Vibe Player CI

on:
  push:
    branches: [ "**" ] # Run on pushes to all branches
  pull_request:
    branches: [ "main", "master" ] # Run on PRs targeting main or master

jobs:
  test:
    timeout-minutes: 60
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      # 1. Setup Node.js and configure caching for npm packages
      # This step handles caching for both the root and the /vibe-player-v2 directories
      # by looking at both package-lock.json files.
      - name: Use Node.js 18.x
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      # 2. Install dependencies for the V2 app and the root project.
      # The `setup-node` action automatically handles skipping this if the cache was restored.
      - name: Install V2 dependencies
        working-directory: ./vibe-player-v2
        run: npm install

      - name: Install root dependencies
        run: npm install

      # 3. Run all tests and builds as before
      - name: Lint V2
        working-directory: ./vibe-player-v2
        run: npm run lint

      - name: Run V2 unit and component tests
        working-directory: ./vibe-player-v2
        run: npm run test:unit

      - name: Build Vibe Player V2
        working-directory: ./vibe-player-v2
        run: npm run build

      # Start the preview server for E2E tests
      - name: Start V2 preview server
        working-directory: ./vibe-player-v2
        run: npm run preview &
        env:
          HOST: '0.0.0.0'
          PORT: 4173

      - name: Wait for Preview Server
        run: npx wait-on http://localhost:4173 --timeout 60000

      # 4. Implement caching for Playwright browsers
      # Step 4a: Attempt to restore the browser cache.
      - name: Cache Playwright browsers
        id: cache-playwright-browsers
        uses: actions/cache@v4
        with:
          # The directory where Playwright stores its browser binaries
          path: ~/.cache/ms-playwright
          # A unique key for the cache. If package-lock.json changes, this key changes,
          # which "busts" the cache and forces a new install.
          key: playwright-browsers-${{ runner.os }}-${{ hashFiles('package-lock.json') }}
          # A fallback key to use the latest available cache if the exact key isn't found
          restore-keys: |
            playwright-browsers-${{ runner.os }}-

      # Step 4b: Install browsers ONLY if the cache was not found in the previous step.
      - name: Install Playwright Browsers and dependencies
        if: steps.cache-playwright-browsers.outputs.cache-hit != 'true'
        run: npx playwright install --with-deps

      # 5. Run the E2E tests, which will now use the cached browsers
      - name: Run Playwright E2E tests
        run: npx playwright test

      # 6. Cleanup and Reporting
      - name: Stop preview server
        if: always()
        run: pkill -f "vite preview" || echo "Preview server already stopped or not found."
        continue-on-error: true

      - name: Upload Playwright report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 7
